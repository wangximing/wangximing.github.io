<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[sigh]]></title>
  <subtitle><![CDATA[音乐是情感的独白]]></subtitle>
  <link href="/atom.xml" rel="self"/>
  <link href="http://wangximing.github.io/"/>
  <updated>2016-03-16T15:09:47.000Z</updated>
  <id>http://wangximing.github.io/</id>
  
  <author>
    <name><![CDATA[王西明]]></name>
    <email><![CDATA[sighwang@outlook.com]]></email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[理解HTTPS]]></title>
    <link href="http://wangximing.github.io/2016/03/16/https/"/>
    <id>http://wangximing.github.io/2016/03/16/https/</id>
    <published>2016-03-16T08:33:45.000Z</published>
    <updated>2016-03-16T15:09:47.000Z</updated>
    <content type="html"><![CDATA[<h2 id="理解HTTPS">理解HTTPS</h2><h3 id="为什么需要HTTPS">为什么需要HTTPS</h3><p>http协议是明文传输的，这样的话:</p>
<ul>
<li>介于发送端和接收端的任何第三方节点都是可以看到传输的内容（窃听风险）</li>
<li>第三方节点可以篡改消息内容（篡改风险）</li>
<li>并且这些中间节点可以获取你的用户名和密码，伪造为你和服务器通讯，或者伪造成服务器和你通讯（冒充风险）</li>
</ul>
<p>对于冒充风险，即使你对用户名和密码进行加密。但是这些中间节点依然可以转发你的认证信息同服务器进行通讯。这样是不是很可怕呢？</p>
<p>从上面的描述中，我们可以得出使用HTTP进行传输有两个问题</p>
<ul>
<li>传输内容是明文的</li>
<li>传输内容可以被修改</li>
<li>服务器不知道发送请求的是不是真的用户，用户也不知道响应请求的是不是真的服务器</li>
</ul>
<h3 id="简介">简介</h3><p>HTTPS是<code>Hyper Text Transfer Protocol over Secure Socket Layer</code>的缩写，意思是安全的HTTP，但是为什么就安全了呢？从上面的描述可以知道，要做到安全，就要做到两件事情。</p>
<ul>
<li>对传输内容进行加密</li>
<li>防止传输内容被修改，或者内容被修改后能够被通讯的另一方知道</li>
<li>让用户知道自己是再和真的服务器进行通讯，让服务器知道和自己通讯的是真的用户</li>
</ul>
<h3 id="加密传输">加密传输</h3><h4 id="常见的加密手段有两种">常见的加密手段有两种</h4><ul>
<li><p>对称加密</p>
<p>  对称加密的意思就是说，加密和解密都用的是同一个秘钥。这样做的<strong>好处</strong>是加密效率非常高，但是<strong>坏处</strong>是秘钥要要保证没有泄露。对于有多个数据交换的个体，两两之间需要分配并维护一把秘钥，这个带来的成本是不可接受的。</p>
</li>
<li><p>非对称加密（公开秘钥加密）</p>
<ul>
<li>非对称加密的意思就是，加密用的公钥（私钥）和解密用的私钥（公钥）是不一样的</li>
<li>公钥的意思就是公开的秘钥，一般由网站用户使用</li>
<li>私钥的意思就是非公开的秘钥，一般由网站管理员持有</li>
</ul>
</li>
</ul>
<p>一般情况下，用公钥加密的数据，只有用私钥才能解开。<strong>用私钥加密的数据，只有用公钥才能解开</strong>。</p>
<p>那么HTTPS采用何种加密的方式呢？</p>
<ul>
<li><p>对称加密？</p>
<p>  前面已经提到，对称加密的坏处是对于多个数据交换的个体，两两之间需要分配并维护一把密钥。这样做的话成本太高，所以是不采用的。</p>
</li>
<li><p>非对称加密？</p>
<p>  非对称加密看起来很安全，但是它也存在一个问题。用私钥加密的数据可以用公钥解开，而公钥是公开的！</p>
<p>  举个登录例子：XX网站使用非对称加密的方式对传输内容进行加密，浏览器端拥有公钥，服务器端拥有私钥。小花打开网站输入用户名和密码登录，浏览器会对用户名和密码用公钥进行加密传输到服务器端，服务器通过私钥解密。验证身份后，将小花的个人信息通过私钥加密并返回给小花（浏览器）。</p>
<ul>
<li>浏览器端小花的用户名密码–&gt;公钥加密–&gt;服务器–&gt;私钥解密</li>
<li>服务器端小花的个人信息–&gt;私钥加密–&gt;浏览器–&gt;公钥解密</li>
</ul>
</li>
</ul>
<p>注意公钥是公开的，那就意味着小花的个人信息可以被任意的中间节点解密！</p>
<h4 id="HTTPS的加密方式">HTTPS的加密方式</h4><p>通过上面的描述可以看到，对称加密和非对称加密都不适合用来做传输的加密。哪HTTPS究竟使用的那种加密方式呢，答案就是SSL/TLS协议。也就是HTTPS中的S。</p>
<p>SSL(Secure Sockets Layer)安全套接字层。用来在HTTP到TCP/UDP之间加密</p>
<blockquote>
<p>HTTP–&gt;TCP/UDP明文传输  ===&gt;   HTTP–&gt;SSL/TLS加密–&gt;TCP/UDP密文传输。</p>
</blockquote>
<p>SSL采用的是非<strong>对称加密+对称加密</strong>的方式来对传输内容加密的。</p>
<p>简单的讲SSL/TLS的加密方式就是：</p>
<ul>
<li>小花访问XX网站，得到了公钥A</li>
<li>浏览器随机生成一个只有自己知道的对称密钥B，用公钥A加密。传给XX网站</li>
<li>XX通过私钥解密拿到对称密钥B</li>
<li>之后的通信都通过密钥B来加密</li>
</ul>
<p>这样就解决了窃听风险</p>
<p>SSL发展历史</p>
<blockquote>
<ul>
<li>1994年，NetScape公司设计了SSL协议（Secure Sockets Layer）的1.0版，但是未发布。</li>
<li>1995年，NetScape公司发布SSL 2.0版，很快发现有严重漏洞。</li>
<li>1996年，SSL 3.0版问世，得到大规模应用。</li>
<li>1999年，互联网标准化组织ISOC接替NetScape公司，发布了SSL的升级版TLS 1.0版。</li>
<li>2006年和2008年，TLS进行了两次升级，分别为TLS 1.1版和TLS 1.2版。最新的变动是2011年TLS 1.2的修订版。</li>
</ul>
</blockquote>
<h3 id="防止内容被篡改">防止内容被篡改</h3><p>这里就要引入摘要和数字签名的概念</p>
<ul>
<li><strong>摘要</strong>就是对传输的内容通过某种HASH算法计算出固定长度的内容（类似文章摘要）。</li>
<li><strong>数字签名</strong> 就是对摘要用密钥进行加密，得到的内容就是数字签名</li>
</ul>
<p>传输内容–&gt;HASH算法得到固定长度的内容–&gt;摘要–&gt;密钥加密–&gt;数字签名</p>
<p>所以在传输中，只需对传输的内容通过<strong>某种HASH算法</strong>得到摘要，并通过服务器的<strong>私钥</strong>进行加密得到<strong>数字签名</strong>。并将<strong>数字签名</strong>，和<strong>HASH算法</strong>也传到前端。然后前端通过该HASH算法的到<strong>摘要A</strong>，并与通过<strong>公钥</strong>解密数字签名后的<strong>摘要B</strong>对比，就可以判断出传输内容是否被修改。</p>
<h3 id="确定身份">确定身份</h3><p>确定身份就是让浏览器知道自己收到的请求是用户自己发送的(非第三方节点)，让用户知道自己收到的响应是服务器自己发的（非第三方节点）。</p>
<p>像登录时使用短信验证码，或者是谷歌验证器这种方式都是服务器确定登录的就是用户本身。这种验证方式采用的思想就是使用一种非浏览器传输（浏览器和服务器中间的第三方就不能获取）的方式，来做的这种确认。</p>
<p>HTTPS是如何做的呢？</p>
<h4 id="证书">证书</h4><p>证书就相当于一个网站的身份证，当用户通过HTTPS访问XX网站的时候，会先从网站上获取XX网站的证书，这时用户就知道了和自己通讯的真的是XX，而不是第三方节点。</p>
<p>证书是由CA（Certificate Authority，权威机构）颁发的，CA是一个被信任的第三方机构。</p>
<p>证书是明文传授的，所以存在几个问题：</p>
<ul>
<li>证书是伪造的</li>
<li>证书被篡改</li>
</ul>
<p>解释上面的问题，就要先了解下证书的结构。</p>
<blockquote>
<ul>
<li>颁发证书机构的名称（哪个CA）</li>
<li>证书内容本身的数字签名（CA的密钥加密）</li>
<li>证书摘要使用的HASH算法</li>
<li>证书的公钥</li>
</ul>
</blockquote>
<ul>
<li><p>证书是伪造的</p>
<p>  浏览器读取证书的颁发机构的名称，和浏览器内置的受信任的CA列表进行对比，发现是不受信任的证书。就会被认定为危险。</p>
</li>
<li><p>证书内容被伪造</p>
<p>  证书内容被伪造（包括颁发证书的机构名称， 数字签名等所有内容），根据<strong>防止内容被篡改</strong>中讲的内容，利用证书的签名，HASH算法和公钥可以判断出内容被修改。就会被认定为危险。</p>
</li>
</ul>
<p>现在解决的<strong>窃听风险， 篡改风险，冒充风险</strong>，数据就可以安全的传输了，但是还有一些小问题，<br>如证书是怎么到浏览器的和其他的比较细节步骤，HTTPS是怎么做的呢？</p>
<p>HTTPS有一个<strong>握手流程</strong>，在这个过程中的数据全部是明文传输的，然后协商出一个对称密钥为后面的具体通讯加密。</p>
<pre><code>&gt;  <span class="comment">访问XX</span><span class="literal">-</span><span class="literal">-</span>&gt;<span class="comment">HTTPS握手</span><span class="literal">-</span><span class="literal">-</span>&gt;<span class="comment">协商出对称密钥</span><span class="literal">-</span><span class="literal">-</span>&gt;<span class="comment">开始加密传输</span>
</code></pre><h3 id="HTTPS握手">HTTPS握手</h3><ul>
<li><p>客户端发出请求,请求包含</p>
<blockquote>
<ul>
<li>支持的协议版本，比如TLS 1.0版。</li>
<li>一个客户端生成的随机数，稍后用于生成”对话密钥”。</li>
<li>支持的加密方法，比如RSA公钥加密。</li>
<li>支持的压缩方法。</li>
</ul>
</blockquote>
</li>
<li><p>服务器回应,回应包含</p>
<blockquote>
<ul>
<li>确认使用的加密通信协议版本，比如TLS 1.0版本。如果浏览器与服务器支持的版本不一致，服务器关闭加密通信。</li>
<li>一个服务器生成的随机数，稍后用于生成”对话密钥”。</li>
<li>确认使用的加密方法，比如RSA公钥加密。</li>
<li>服务器证书。</li>
</ul>
</blockquote>
</li>
<li><p>客户端回应</p>
<blockquote>
<ul>
<li>一个随机数。该随机数用服务器公钥加密，防止被窃听。</li>
<li>编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送。</li>
<li>客户端握手结束通知，表示客户端的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供服务器校验。</li>
</ul>
</blockquote>
</li>
<li><p>服务器最后的回应</p>
<blockquote>
<ul>
<li>编码改变通知，表示随后的信息都将用双方商定的加密方法和密钥发送。</li>
<li>服务器握手结束通知，表示服务器的握手阶段已经结束。这一项同时也是前面发送的所有内容的hash值，用来供客户端校验。</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="证书的格式">证书的格式</h3><figure class="highlight openscad"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span>. 证书版本号<span class="params">(Version)</span></span><br><span class="line">版本号指明X.<span class="number">509</span>证书的格式版本，现在的值可以为:</span><br><span class="line">    <span class="number">1</span>) <span class="number">0</span>: v1</span><br><span class="line">    <span class="number">2</span>) <span class="number">1</span>: v2</span><br><span class="line">    <span class="number">3</span>) <span class="number">2</span>: v3</span><br><span class="line">也为将来的版本进行了预定义</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>. 证书序列号<span class="params">(Serial Number)</span></span><br><span class="line">序列号指定由CA分配给证书的唯一的<span class="string">"数字型标识符"</span>。当证书被取消时，实际上是将此证书的序列号放入由CA签发的CRL中，</span><br><span class="line">这也是序列号唯一的原因。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>. 签名算法标识符<span class="params">(Signature Algorithm)</span></span><br><span class="line">签名算法标识用来指定由CA签发证书时所使用的<span class="string">"签名算法"</span>。算法标识符用来指定CA签发证书时所使用的:</span><br><span class="line">    <span class="number">1</span>) 公开密钥算法</span><br><span class="line">    <span class="number">2</span>) hash算法</span><br><span class="line">example: sha256WithRSAEncryption</span><br><span class="line">须向国际知名标准组织<span class="params">(如ISO)</span>注册</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>. 签发机构名<span class="params">(Issuer)</span></span><br><span class="line">此域用来标识签发证书的CA的X.<span class="number">500</span> DN<span class="params">(DN-Distinguished Name)</span>名字。包括:</span><br><span class="line">    <span class="number">1</span>) 国家<span class="params">(C)</span></span><br><span class="line">    <span class="number">2</span>) 省市<span class="params">(ST)</span></span><br><span class="line">    <span class="number">3</span>) 地区<span class="params">(L)</span></span><br><span class="line">    <span class="number">4</span>) 组织机构<span class="params">(O)</span></span><br><span class="line">    <span class="number">5</span>) 单位部门<span class="params">(OU)</span></span><br><span class="line">    <span class="number">6</span>) 通用名<span class="params">(CN)</span></span><br><span class="line">    <span class="number">7</span>) 邮箱地址</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>. 有效期<span class="params">(Validity)</span></span><br><span class="line">指定证书的有效期，包括:</span><br><span class="line">    <span class="number">1</span>) 证书开始生效的日期时间</span><br><span class="line">    <span class="number">2</span>) 证书失效的日期和时间</span><br><span class="line">每次使用证书时，需要检查证书是否在有效期内。</span><br><span class="line"></span><br><span class="line"><span class="number">6</span>. 证书用户名<span class="params">(Subject)</span></span><br><span class="line">指定证书持有者的X.<span class="number">500</span>唯一名字。包括:</span><br><span class="line">    <span class="number">1</span>) 国家<span class="params">(C)</span></span><br><span class="line">    <span class="number">2</span>) 省市<span class="params">(ST)</span></span><br><span class="line">    <span class="number">3</span>) 地区<span class="params">(L)</span></span><br><span class="line">    <span class="number">4</span>) 组织机构<span class="params">(O)</span></span><br><span class="line">    <span class="number">5</span>) 单位部门<span class="params">(OU)</span></span><br><span class="line">    <span class="number">6</span>) 通用名<span class="params">(CN)</span></span><br><span class="line">    <span class="number">7</span>) 邮箱地址</span><br><span class="line"></span><br><span class="line"><span class="number">7</span>. 证书持有者公开密钥信息<span class="params">(Subject Public Key Info)</span></span><br><span class="line">证书持有者公开密钥信息域包含两个重要信息:</span><br><span class="line">    <span class="number">1</span>) 证书持有者的公开密钥的值</span><br><span class="line">    <span class="number">2</span>) 公开密钥使用的算法标识符。此标识符包含公开密钥算法和hash算法。</span><br><span class="line"><span class="number">8</span>. 扩展项<span class="params">(extension)</span></span><br><span class="line">X.<span class="number">509</span> V3证书是在v2的基础上一标准形式或普通形式增加了扩展项，以使证书能够附带额外信息。标准扩展是指</span><br><span class="line">由X.<span class="number">509</span> V3版本定义的对V2版本增加的具有广泛应用前景的扩展项，任何人都可以向一些权威机构，如ISO，来</span><br><span class="line">注册一些其他扩展，如果这些扩展项应用广泛，也许以后会成为标准扩展项。</span><br><span class="line"></span><br><span class="line"><span class="number">9</span>. 签发者唯一标识符<span class="params">(Issuer Unique Identifier)</span></span><br><span class="line">签发者唯一标识符在第<span class="number">2</span>版加入证书定义中。此域用在当同一个X.<span class="number">500</span>名字用于多个认证机构时，用一比特字符串</span><br><span class="line">来唯一标识签发者的X.<span class="number">500</span>名字。可选。</span><br><span class="line"></span><br><span class="line"><span class="number">10</span>. 证书持有者唯一标识符<span class="params">(Subject Unique Identifier)</span></span><br><span class="line">持有证书者唯一标识符在第<span class="number">2</span>版的标准中加入X.<span class="number">509</span>证书定义。此域用在当同一个X.<span class="number">500</span>名字用于多个证书持有者时，</span><br><span class="line">用一比特字符串来唯一标识证书持有者的X.<span class="number">500</span>名字。可选。</span><br><span class="line"></span><br><span class="line"><span class="number">11</span>. 签名算法<span class="params">(Signature Algorithm)</span></span><br><span class="line">证书签发机构对证书上述内容的签名算法</span><br><span class="line">example: sha256WithRSAEncryption</span><br><span class="line"></span><br><span class="line"><span class="number">12</span>. 签名值<span class="params">(Issuer's Signature)</span></span><br><span class="line">证书签发机构对证书上述内容的签名值</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="理解HTTPS">理解HTTPS</h2><h3 id="为什么需要HTTPS">为什么需要HTTPS</h3><p>http协议是明文传输的，这样的话:</p>
<ul>
<li>介于发送端和接收端的任何第三方节点都是可以看到传输的内容（窃听风险）</li>
<]]>
    </summary>
    
  </entry>
  
  <entry>
    <title></title>
    <link href="http://wangximing.github.io/2016/03/14/css%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83/"/>
    <id>http://wangximing.github.io/2016/03/14/css代码规范/</id>
    <published>2016-03-14T06:56:08.000Z</published>
    <updated>2016-03-14T06:56:08.000Z</updated>
    <content type="html"><![CDATA[<p>一份规划良好的 CSS 应当按照如下排列：</p>
<ul>
<li>Reset 万物之根源</li>
<li>元素类型 没有 class 的 h1、ul 等</li>
<li>对象以及抽象内容 最一般、最基础的设计模式</li>
<li>子元素 由对象延伸出来的所有拓展及其子元素</li>
<li>修补 针对异常状态</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>一份规划良好的 CSS 应当按照如下排列：</p>
<ul>
<li>Reset 万物之根源</li>
<li>元素类型 没有 class 的 h1、ul 等</li>
<li>对象以及抽象内容 最一般、最基础的设计模式</li>
<li>子元素 由对象延伸出来的所有拓展及]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[XHR 实践]]></title>
    <link href="http://wangximing.github.io/2016/03/10/xhr/"/>
    <id>http://wangximing.github.io/2016/03/10/xhr/</id>
    <published>2016-03-10T08:33:45.000Z</published>
    <updated>2016-03-10T14:33:09.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li><strong>跨域</strong>：浏览器在全局层面禁止了页面在加载或执行与自身来源不同的域的任何脚本。</li>
</ul>
<h3 id="使用JSONP">使用JSONP</h3><p>jsonp的原理是通过<script>标签发起一个GET请求来取代XHR请求。JSONP生成一个<script>标签并插入到DOM中，然后浏览器会接管并向src属性所指向的地址发送请求。</p>
<h3 id="使用CORS">使用CORS</h3><ul>
<li>CORS （跨域资源共享，Corss Origin Resource Sharing）</li>
</ul>
<h3 id="使用代理服务器">使用代理服务器</h3></script></p>]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li><strong>跨域</strong>：浏览器在全局层面禁止了页面在加载或执行与自身来源不同的域的任何脚本。</li>
</ul>
<h3 id="使用JSONP">使用JSONP</h3><p>jsonp的原理是通过<script>标签发起一个GET请求来取代]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Angular Conncet with Server]]></title>
    <link href="http://wangximing.github.io/2016/03/08/Angular-connect-with-server/"/>
    <id>http://wangximing.github.io/2016/03/08/Angular-connect-with-server/</id>
    <published>2016-03-08T08:33:45.000Z</published>
    <updated>2016-03-10T14:06:05.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Angular_Conncet_with_Server">Angular Conncet with Server</h2><p>Angular与服务器通过<code>$http</code>通信。$http 服务简单的封装了浏览器原生的XMLHttpRequest对象。<br>在Angular中，可以通过使用 <code>$http</code>, <code>$resource</code>, <code>Restangular</code>与服务器交互。</p>
<h3 id="$http">$http</h3><p>$http返回一个promise对象</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> promise = $http(&#123;method: <span class="string">'GET'</span>, url: <span class="string">'/api/users'</span>, params: &#123;&#125;&#125;)</span><br></pre></td></tr></table></figure>
<p><code>$http</code>还提供了一些快捷方法$http.get(),$http.delete()等。</p>
<h3 id="$resource">$resource</h3><p>Angular 提供了一个 <code>$resource</code> 服务，用于创建资源对象，我们可以用$resource 方便的与 RESTful的服务端进行交互。</p>
<p>$resource的参数为$resourec(‘url’, {paramDefaults}, {actions})</p>
<h4 id="定义一个resource">定义一个resource</h4><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义</span></span><br><span class="line"><span class="keyword">var</span> Users = $resource(<span class="string">'/api/users/:id'</span>, &#123;id: <span class="string">'@id'</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//简单使用</span></span><br><span class="line">Users.get(); <span class="comment">//get users list</span></span><br><span class="line">Users.get(&#123;id: <span class="string">'333'</span>&#125;); <span class="comment">// get /api/users/333</span></span><br></pre></td></tr></table></figure>
<p>可以看出<code>$resource</code> 使用起来比<code>$http</code>使用起来方便好多。<code>$resource</code>还支持 save(), delete等方法。</p>
<ul>
<li>get类方法的参数如下 get({params, successHandle, errorHandle})</li>
<li>非get类方法的参数 save({params, postData, successHandle, errorHandle})</li>
</ul>
<h4 id="$resource的附加属性">$resource的附加属性</h4><ul>
<li>$promise</li>
<li><p>$resolved</p>
<blockquote>
<p>这里不理解</p>
</blockquote>
</li>
</ul>
<h4 id="自定义$resource">自定义$resource</h4><p>前面的关于user的例子</p>
<ul>
<li>可以用get方法获取一个user.</li>
<li>可以根据id获取users</li>
</ul>
<p>那么就引申出两个问题</p>
<ul>
<li>怎么使用PATCH方法来修改user的一个字段</li>
<li>怎么根据username来获取一个user</li>
</ul>
<p>在这里就可以使用<code>$resource</code>的action 参数来自定义$resource<br>action的参数为<code>action1: {method:?, params:?, isArray:?, headers:?, ...}</code></p>
<ul>
<li><p>使用patch方法</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$resource(<span class="string">'/api/users/:id'</span>, &#123;id: <span class="string">'@id'</span>&#125;, &#123;</span><br><span class="line">	patch: &#123;method: <span class="string">'PATCH'</span>&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>根据username获取user</p>
  <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$resource(<span class="string">'/api/users/:id'</span>, &#123;id: <span class="string">'@id'</span>&#125;, &#123;</span><br><span class="line">	getByName: &#123;method: <span class="string">'GET'</span>, url: <span class="string">'/api/users/username-:username, params: &#123;username: '</span>@username<span class="string">'&#125;'</span>&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<p>  这个容易犯一个错误就是为了根据用户名获取重新定义一个resource，但其实访问的都是users资源，是同一个，所以不应该建两个resource.</p>
</li>
</ul>
<h3 id="Restangular">Restangular</h3><p>是一个专门的Angular发RESTful的请求的库。<br><strong>需要新开一篇</strong></p>
<blockquote>
<ul>
<li>ETags </li>
<li>If-NoneMatch</li>
</ul>
</blockquote>
<h3 id="拦截器">拦截器</h3><p>如果我们要添加全局性的功能，如身份验证，错误处理的时候。就要用到拦截器。</p>
<p>拦截器的核心是服务工厂，通过向$httpProvider.intercetors数组中添加 factory service。</p>
<p>一共有四种拦截器，两种成功的，两种失败的</p>
<ul>
<li>request 请求成功</li>
<li>response 响应失败</li>
<li>requestError 请求失败 <strong>这个有什么用？</strong></li>
<li>responseError 响应失败</li>
</ul>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'app'</span>).factory(<span class="string">'AuthHandler'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">$q, $injector, loginUser</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> AuthHandler = &#123;&#125;;</span><br><span class="line">  AuthHandler.request = <span class="function"><span class="keyword">function</span> (<span class="params">config</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (config.data &amp;&amp; config.data.$skipAuthHandler) &#123;</span><br><span class="line">      config.$skipAuthHandler = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">delete</span> config.data.$skipAuthHandler;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (config.params &amp;&amp; config.params.$skipAuthHandler) &#123;</span><br><span class="line">      config.$skipAuthHandler = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">delete</span> config.params.$skipAuthHandler;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    config.headers.Authorization = loginUser.authorization();</span><br><span class="line">    <span class="keyword">return</span> $q.when(config);</span><br><span class="line">  &#125;;</span><br><span class="line">  AuthHandler.responseError = <span class="function"><span class="keyword">function</span> (<span class="params">rejection</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (rejection.status === <span class="number">401</span> &amp;&amp; rejection.config &amp;&amp; !rejection.config.$skipAuthHandler) &#123;</span><br><span class="line">      $injector.get(<span class="string">'$state'</span>).go(<span class="string">'unauthorized'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> $q.reject(rejection);</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="keyword">return</span> AuthHandler;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用</span></span><br><span class="line">angular.module(<span class="string">'app'</span>).config(<span class="function"><span class="keyword">function</span> (<span class="params">RewriteHandlerProvider, $httpProvider</span>) </span>&#123;</span><br><span class="line">  $httpProvider.interceptors.push(<span class="string">'AuthHandler'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Angular_Conncet_with_Server">Angular Conncet with Server</h2><p>Angular与服务器通过<code>$http</code>通信。$http 服务简单的封装了浏览器原生的XMLHttpRequest]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Angular Service 学习笔记]]></title>
    <link href="http://wangximing.github.io/2016/03/02/AngularJS-Services/"/>
    <id>http://wangximing.github.io/2016/03/02/AngularJS-Services/</id>
    <published>2016-03-02T08:33:45.000Z</published>
    <updated>2016-03-05T13:52:34.000Z</updated>
    <content type="html"><![CDATA[<h2 id="创建服务的5中方式">创建服务的5中方式</h2><ul>
<li>factory()</li>
<li>service()</li>
<li>contant()</li>
<li>value()</li>
<li>provider()</li>
</ul>
<p><strong>service在Angular中是单例，只会被创建一次。</strong></p>
<h3 id="factory">factory</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"> angular.module(<span class="string">'app'</span>)</span><br><span class="line"> 	.factory(<span class="string">'serviceName'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> 		<span class="comment">//在创建服务实例时被调用，只会被调用一次</span></span><br><span class="line"> 		<span class="keyword">var</span> productService = &#123;</span><br><span class="line"> 			filed: <span class="string">'hello'</span>;,</span><br><span class="line"> 			method: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"> 			&#125;</span><br><span class="line"> 		&#125;</span><br><span class="line"> 		<span class="keyword">return</span> productService;</span><br><span class="line"> 	&#125;);</span><br><span class="line"></span><br><span class="line"> angular.controller(<span class="string">'Controller'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">serviceName</span>) </span>&#123;</span><br><span class="line">	serviceName.method();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="service()">service()</h3><p>service()函数会在创建实例时通过new关键字来实例化服务对象</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">angular.service(<span class="string">'serviceName'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">	<span class="keyword">this</span>.method =  <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;;</span><br><span class="line">	<span class="keyword">this</span>.filed = <span class="string">'hello'</span>;</span><br><span class="line">&#125;);</span><br><span class="line">angular.controller(<span class="string">'Controller'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">serviceName</span>) </span>&#123;</span><br><span class="line">	serviceName.method();</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="provider()">provider()</h3><h4 id="factory()和provider()_**">factory()和provider() <em>**</em></h4><p>所有的factory()都是由$provider服务创建的, 假定传入的函数就是$get(), factory()就是provider()的简略形式。</p>
<blockquote>
<ul>
<li>$provider 和provider()的关系</li>
<li>$provider 和服务的关系</li>
</ul>
</blockquote>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'app'</span>)</span><br><span class="line">  .provider(<span class="string">'myService'</span>, &#123;</span><br><span class="line">  		$get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .factory(<span class="string">'myService'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  &#125;);</span><br></pre></td></tr></table></figure>
<h4 id="provider()定义的服务，可用于config()">provider()定义的服务，可用于config()</h4><p>myService是定义provider的名字，myServerProvider是服务的提供者。<br>如下使用（未验证）；</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'app'</span>)</span><br><span class="line">  .provider(<span class="string">'myService'</span>, &#123;</span><br><span class="line">  		<span class="keyword">var</span> message = <span class="string">''</span>;</span><br><span class="line">  		setMessage: <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span><br><span class="line">  			message = message;</span><br><span class="line">  		&#125;</span><br><span class="line">  		$get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">  			<span class="built_in">console</span>.log(message);</span><br><span class="line">  		&#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  .config(<span class="function"><span class="keyword">function</span>(<span class="params">myServiceProvider</span>) </span>&#123;</span><br><span class="line">  		myServiceProvider.setMessage(<span class="string">'say hello'</span>);</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="constant(),value()">constant(),value()</h3><p>constant()和value()都是注册一个变量为服务，可以注入到应用的其他部分。<br>不同的是<strong>constant()可以注入到config()中，而value()不可以</strong></p>
<h3 id="decorator()">decorator()</h3><p>decorator()可以对AngularJS的核心服务或者我们自己的服务进行里纳西，中断或者替换，Angular总的测试就是借助的$provider.decorator()建立的。</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="title">decorator</span><span class="params">(<span class="string">'name'</span>, decoratorFn)</span></span></span><br><span class="line">name: 将要拦截的服务名称</span><br><span class="line">decoratorFn: 处理拦截的函数</span><br></pre></td></tr></table></figure>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'app'</span>).config(<span class="function"><span class="keyword">function</span> (<span class="params">$provider</span>) </span>&#123;</span><br><span class="line">	$provider.decorator(<span class="string">'myService'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">		<span class="comment">//怎么做还没弄明白</span></span><br><span class="line">	&#125;)</span><br><span class="line">&#125;) ;</span><br></pre></td></tr></table></figure>
<blockquote>
<p>什么时候用factory()什么时候用service();<br>service()–&gt;factory()–&gt;provider()</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="创建服务的5中方式">创建服务的5中方式</h2><ul>
<li>factory()</li>
<li>service()</li>
<li>contant()</li>
<li>value()</li>
<li>provider()</li>
</ul>
<p]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Promise]]></title>
    <link href="http://wangximing.github.io/2016/01/11/Promise/"/>
    <id>http://wangximing.github.io/2016/01/11/Promise/</id>
    <published>2016-01-10T16:01:38.000Z</published>
    <updated>2016-01-15T07:34:57.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Promise_in_JavaScript">Promise in JavaScript</h2><h3 id="WHY">WHY</h3><p> Promise是一个古老的<strong>概念</strong>（1976），又叫Deferred(延期的)，Future<code>java.util.concurrent.Future</code>。<br> JavaScript是单线程，为了防止线程阻塞，在JS中有一种写法叫做<strong>回调</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$.get(<span class="string">'/users/123'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">user</span>) </span>&#123;</span><br><span class="line">    <span class="comment">//这里可以对User进行一些操作</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>
<p>这样就解决了JS单线程的问题了，但是又引出了一个新的问题 回调地狱</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$.get(<span class="string">'/users/123'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">class</span>) </span>&#123;</span><br><span class="line">     $.get(<span class="string">'/class/4'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">school</span>) </span>&#123;</span><br><span class="line">         $.get(<span class="string">'/schooles/123/chairman'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">class</span>) </span>&#123;</span><br><span class="line">             <span class="built_in">console</span>.log(<span class="string">'get data'</span>);</span><br><span class="line">         &#125;)</span><br><span class="line">     &#125;)</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>
<p>回调地狱存在的明显的问题 难读而且也难测。然后为了解决这些问题，降低异步编程的复杂性，开发人员一直寻找简便的方法来处理异步操作，就出现了一个概念<strong>Promise</strong>和Promise的一系列的实现。Promise代表了一种可能会长时间运行而且不一定必须完整的操作的结果.</p>
<h3 id="WHAT">WHAT</h3><p>所谓Promise，字面上可以理解为”承诺”，就是说A调用B，B返回一个”承诺”给A，然后A就可以在写计划的时候这么写：当B返回结果给我的时候，A执行方案S1，反之如果B因为什么原因没有给到A想要的结果，那么A执行应急方案S2，这样一来，所有的潜在风险都在A的可控范围之内了。</p>
<p>Promise有三种状态</p>
<ul>
<li><code>pending</code>: 初始状态， new</li>
<li><code>fulfilled</code>: 表示操作成功//success callback</li>
<li><code>rejected</code>: 表示操作失败//failure callback</li>
</ul>
<h3 id="HOW">HOW</h3><ul>
<li><p><code>promise.then(success,failure)</code>,<code>promise.catch(failure)</code></p>
<p>  <code>promise.catch(failure)</code>相当于<code>promise.then(null, failure)</code></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">  vm.promise1 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  $http.get(<span class="string">'/users'</span>)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'success1'</span>);</span><br><span class="line">      <span class="keyword">return</span> $http.get(<span class="string">'/users/success'</span>);</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'error1'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'success2'</span>);</span><br><span class="line">      <span class="keyword">return</span> $http.get(<span class="string">'/users/error'</span>);</span><br><span class="line">    &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'error2'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'error3'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">    .finally(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'finally'</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//success1</span></span><br><span class="line"><span class="comment">//success2</span></span><br><span class="line"><span class="comment">//GET http://localhost:3000/users/error 500 (Internal Server Error)</span></span><br><span class="line"><span class="comment">//error3</span></span><br><span class="line"><span class="comment">//finally</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果 Promise 被 reject，后面的 then 又没有指定失败回调，会找后面的失败回调。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">$http.get(<span class="string">'/users/error'</span>)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'success1'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'success2'</span>);</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'error1'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'error2'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .finally(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'finally'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//GET http://localhost:3000/users/error</span></span><br><span class="line">    <span class="comment">//view1.js:44 error2</span></span><br><span class="line">    <span class="comment">//view1.js:50 finally</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果Promise失败，那么失败回调后会调用下一个then的成功回调</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$http.get(<span class="string">'/users/error'</span>)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'error1'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'success1'</span>);</span><br><span class="line">  &#125;)</span><br><span class="line">  .finally(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'finally'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"> <span class="comment">//GET http://localhost:3000/users/error 500 (Internal Server Error)</span></span><br><span class="line"> <span class="comment">//error1</span></span><br><span class="line"> <span class="comment">// success1</span></span><br><span class="line"> <span class="comment">// finally</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>如果Promise失败且返回了一个Promise，在后面的then的参数里会被拆开。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$http.get(<span class="string">'/users/error'</span>)</span><br><span class="line">  .catch(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $http.get(<span class="string">'/users/success'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'success1'</span>);</span><br><span class="line">  &#125;, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'error1'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">  .finally(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'finally'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//GET http://localhost:3000/users/error 500 (Internal Server Error)</span></span><br><span class="line"><span class="comment">//success1</span></span><br><span class="line"><span class="comment">//finally</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>angular的all, defer, reject方法</p>
</li>
<li>不仅仅是Ajax</li>
</ul>
<h2 id="MORE">MORE</h2><ul>
<li><a href="http://alinode.aliyun.com/blog/5" target="_blank" rel="external">Promise的前世今生</a></li>
<li><a href="http://api.jquery.com/category/deferred-object/" target="_blank" rel="external">jQuery Deferred</a></li>
<li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="external">MDN Promise</a></li>
<li><a href="http://www.ruanyifeng.com/blog/2011/08/a_detailed_explanation_of_jquery_deferred_object.html" target="_blank" rel="external">jQuery的deferred对象详解 | 阮一峰</a></li>
<li><a href="https://promisesaplus.com/#point-11" target="_blank" rel="external">Promises/A+</a></li>
<li><a href="http://callbackhell.com/" target="_blank" rel="external">回调地狱</a></li>
</ul>
<h2 id="OTHERS">OTHERS</h2><p><a href="https://github.com/kuitos/kuitos.github.io/issues/32#issuecomment-170256304" target="_blank" rel="external">2015前端生态发展回顾</a></p>
<ul>
<li>年初React Native的发布，引领React正式走上历史舞台。</li>
<li>3月angular2.0第一个预览版发布</li>
<li>5月 http/2.0标准正式发布，同月 iojs 与 nodejs合并。</li>
<li>6月 ES6 和 WebAssembly 落地</li>
<li>7月 迄今为止React生态圈影响最大的Flux实现redux发布1.0版本</li>
<li>8月 Facebook公开了在React上应用GraphQL的relay框架的技术预览版</li>
<li>9月 React Native for Andriod 发布</li>
<li>11月伊始，es标准委员会宣布将历时3年研究的Object.observe从草案中移除，尽管它原本已经是stage2，几乎已经是ES7的事实标准。双十一刚一结束，阿里手淘团队发布了名为 无线电商动态化解决方案 的 Weex，也有人给了它一个更具象的名字，vue native。</li>
<li>12月，赶在2015的尾巴，aurelia和angular2先后发布beta版。</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Promise_in_JavaScript">Promise in JavaScript</h2><h3 id="WHY">WHY</h3><p> Promise是一个古老的<strong>概念</strong>（1976），又叫Deferred(延期的)，Fut]]>
    </summary>
    
      <category term="JavaScript Promise" scheme="http://wangximing.github.io/tags/JavaScript-Promise/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[css]]></title>
    <link href="http://wangximing.github.io/2015/12/01/css/"/>
    <id>http://wangximing.github.io/2015/12/01/css/</id>
    <published>2015-12-01T14:54:24.000Z</published>
    <updated>2015-12-01T15:05:29.000Z</updated>
    <content type="html"><![CDATA[<h3 id="设置文字的text-overflow:ellipsis">设置文字的text-overflow:ellipsis</h3><p>有几个前提：</p>
<ul>
<li>容器定宽 （width=100px）</li>
<li>去除空白 （white-space:nowrap）</li>
<li>溢出隐藏：overflow:hidden</li>
<li>文字省略： text-overflow:ellipsis</li>
</ul>
<h3 id="AngularUI_Bootstrap_popover的使用">AngularUI Bootstrap popover的使用</h3><p>现在在一个滚动栏内使用popover，因为滚动栏设置的是 overflow=auto,导致popover多出的部分会藏在滚动栏里面。如图</p>
<p>解决的办法是利用popover的popover-append-to-body属性设置为true<code>popover-append-to-body=true</code></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="设置文字的text-overflow:ellipsis">设置文字的text-overflow:ellipsis</h3><p>有几个前提：</p>
<ul>
<li>容器定宽 （width=100px）</li>
<li>去除空白 （white-space:no]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[我与思沃学院]]></title>
    <link href="http://wangximing.github.io/2015/12/01/%E6%88%91%E4%B8%8E%E6%80%9D%E6%B2%83%E5%AD%A6%E9%99%A2/"/>
    <id>http://wangximing.github.io/2015/12/01/我与思沃学院/</id>
    <published>2015-12-01T14:54:16.000Z</published>
    <updated>2015-12-05T15:43:51.000Z</updated>
    <content type="html"><![CDATA[<p>距离最开始接触学院到现在，已经也快有一年半的时间了。这一年来的身份也经历了从学员-实习生-学员到最后成为公司的一名员工的不同的转变。期间包含了在思沃学院被培训，在思沃学院实习，不在思沃学院的三种不同的角色。想谈一谈我对思沃学院的认识。</p>
<p>思沃学院或者是以前的仝键技校或者是之后的什么什么，不管名字怎么变，做的事情都是培训。在TW培训体系中，思沃学院是属于从入职前+试用期的工作的这段时间的。其中入职前的培训主要有在校生培养到拿offer和拿到offer的人到入职前的这段时间。试用期主要指的是总理在做的对毕业生的访谈跟踪的工作。或许以后会再往下（扩展公司培训体系的「下」）发展到做一些事情直接影响学校的教学，或许往上发展会承担更多的新人在试用期的培养工作。这是我对思沃学院在公司的一个位置的理解。</p>
<p>最近有被问道好多个关于思沃学院的问题，比如说你认为思沃学院是做什么的，你在思沃学院到学到了什么，你感觉思沃学院对你的培训重要么，思沃学院和TWU的区别在哪里的各种问题。我自己平时也有思考这些问题，特别是不在思沃学院之后，我认真的回顾了在思沃学院经历的各种事情，以一个相对「局外人」的角度，思考了在思沃学院学习的这段经历。</p>
<p>关于思沃学院是做什么的。从一个在校学生的角度来讲，思沃学院是一个可以学到知识的地方，一个可以学习到公司是怎么做事的地方，一个可能的去TW工作的机会。从公司的角度来讲，思沃学院是一个可以让更多的学生，学校知道了解公司的机构，一个可以给公司输送员工的地方，一个可以对提高应届生上项目时能力的地方，更重要的是公司扩大规模后的新人培养方式的一种尝试。</p>
<p>思沃学院的培训对我来说很重要，不仅仅是学到了多少知识，更重要的是在刚开始的时候就走在一个正确的道路上（敏捷实践，自我学习等）。我经历过思沃学院在校生到拿到offer的这段时间的培训，思沃学院教得内容有简单的编程训练 clean code 重构 tdd和一些其他的敏捷实践，还有一些命令行，git等得使用。思沃学院的培训还是很重要的，我们当时的9个人，之前没有编程经验的培训后和好像写了一年代码的样子，有过编程经验的我再看自己之前写的代码也是觉得烂不行。就我自身来说，编程的素养提高了，编码的能力也提高了不少。说不出什么具体的可以度量的东西，但就是有种高了一个level的感觉。</p>
<p>思沃学院和TWU的区别，或者说是不同、差距在哪里。我想这对思沃学院是非常重要。</p>
<p>还记得当时有听过仝老师讲到过一个『标准化』和『精品课程』的问题，去了TWU后真切的感受到了『标准化』，当时仝老师对标准化的解释是有一个教学大纲、有上课的PPT、有这节课讲的重点和检查标准等。有一套标准在这里，随便来一个人，经过短时间的培训，拿着这个标准化的课程资料，就可以去教这节课了。思沃学院现在正在实现标准化的道路上前行，相信在仝老师的带领下，很快就可以达成这个目标。再加上思沃学院有固定的和很认真负责且愿意投入大量时间到教育培训上的老师，思沃学院一定会越走越好。也建议老师们去感受下TWU的教学。</p>
<p>当然思沃学院还有许多要改进的地方。在思沃学院还没有实现标准化和精品课程的现在，思沃学院的教学还是主要靠”人”，一节课怎么讲主要看个人怎么讲的，这样子其实很局限于某个人得知识范围，在一些有争议的问题上容易导致一家之言，其实并不是很好，一个人也不把所有的敏捷实践，编码的最佳实践做都到很好。所以有一个建议就是尽量不同的人讲不同课，并且有一个pair在一边当”观察者”。</p>
<p>因为思沃学院是一个相对较新的团队，加上一直在外办公。所以就导致公司好多同事对思沃学院不是很熟悉。希望我的这篇文章可以解答大家的一些疑惑。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>距离最开始接触学院到现在，已经也快有一年半的时间了。这一年来的身份也经历了从学员-实习生-学员到最后成为公司的一名员工的不同的转变。期间包含了在思沃学院被培训，在思沃学院实习，不在思沃学院的三种不同的角色。想谈一谈我对思沃学院的认识。</p>
<p>思沃学院或者是以前的仝键]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[scss]]></title>
    <link href="http://wangximing.github.io/2015/11/17/scss/"/>
    <id>http://wangximing.github.io/2015/11/17/scss/</id>
    <published>2015-11-17T13:00:59.000Z</published>
    <updated>2015-11-17T13:03:54.000Z</updated>
    <content type="html"><![CDATA[<p>css不是一种编程语言，sass为css加入了编程元素。<br>sass的后缀是.scss。sassy css。</p>
<h3 id="编译风格">编译风格</h3><ul>
<li>nested 嵌套缩进的css代码，反映了HTML DOM 的结构。</li>
<li>expended: 没有嵌套缩进的css</li>
<li>compact ：</li>
<li>compressed：</li>
</ul>
<h3 id="变量">变量</h3><p>以$开头在sass中被认为是变量<br><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$font-color</span><span class="value">: <span class="hexcolor">#333</span>;</span></span><br></pre></td></tr></table></figure></p>
<h3 id="导入">导入</h3><p>reset.scss<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ol &#123;&#10;&#9;margin:0&#10;&#9;padding:0&#10;&#125;</span><br></pre></td></tr></table></figure></p>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@import &#39;reset&#39;;&#10;bodyy &#123;&#10;&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">html, body, ul, ol &#123;&#10;  margin: 0;&#10;  padding: 0;&#10;&#125;&#10;&#10;body &#123;&#10;  font: 100% Helvetica, sans-serif;&#10;  background-color: #efefef;&#10;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="Mixin">Mixin</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">@mixin border-radius($radius) &#123;&#10;  -webkit-border-radius: $radius;&#10;     -moz-border-radius: $radius;&#10;      -ms-border-radius: $radius;&#10;          border-radius: $radius;&#10;&#125;&#10;&#10;.box &#123; @include border-radius(10px); &#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.box</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">-webkit-border-radius</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-moz-border-radius</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">-ms-border-radius</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">border-radius</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="继承">继承</h3><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.message</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="hexcolor">#ccc</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="hexcolor">#333</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class">.success</span> &#123;</span><br><span class="line">  <span class="variable">@extend</span> .message;</span><br><span class="line">  <span class="attribute">border-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class">.error</span> &#123;</span><br><span class="line">  <span class="variable">@extend</span> .message;</span><br><span class="line">  <span class="attribute">border-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class">.warning</span> &#123;</span><br><span class="line">  <span class="variable">@extend</span> .message;</span><br><span class="line">  <span class="attribute">border-color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class">.message</span>, <span class="class">.success</span>, <span class="class">.error</span>, <span class="class">.warning</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">border</span>:<span class="value"> <span class="number">1px</span> solid <span class="hexcolor">#cccccc</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">padding</span>:<span class="value"> <span class="number">10px</span></span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">color</span>:<span class="value"> <span class="hexcolor">#333</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.success</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">border-color</span>:<span class="value"> green</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.error</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">border-color</span>:<span class="value"> red</span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="class">.warning</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">border-color</span>:<span class="value"> yellow</span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
<h3 id="运算_operators">运算 operators</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">article</span><span class="attr_selector">[role="main"]</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">float</span>:<span class="value"> left</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">600px</span> / <span class="number">960px</span> * <span class="number">100%</span></span></span>;</span><br><span class="line">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">aside</span><span class="attr_selector">[role="complimentary"]</span> <span class="rules">&#123;</span><br><span class="line">  <span class="rule"><span class="attribute">float</span>:<span class="value"> right</span></span>;</span><br><span class="line">  <span class="rule"><span class="attribute">width</span>:<span class="value"> <span class="number">300px</span> / <span class="number">960px</span> * <span class="number">100%</span></span></span>;</span><br><span class="line">&#125;</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>css不是一种编程语言，sass为css加入了编程元素。<br>sass的后缀是.scss。sassy css。</p>
<h3 id="编译风格">编译风格</h3><ul>
<li>nested 嵌套缩进的css代码，反映了HTML DOM 的结构。</li>
<li>]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[ionic header bar]]></title>
    <link href="http://wangximing.github.io/2015/10/27/ionic-header-bar/"/>
    <id>http://wangximing.github.io/2015/10/27/ionic-header-bar/</id>
    <published>2015-10-27T03:32:42.000Z</published>
    <updated>2015-11-17T13:05:46.000Z</updated>
    <content type="html"><![CDATA[<p>参考：<a href="http://learn.ionicframework.com/formulas/navigation-bar-vs-header-bar/" target="_blank" rel="external">ionic 官方教程</a>;</p>
<p>我们可以用<code>ion-header-bar</code>,<code>ion-nav-bar</code>的任意一个来进行显示导航栏。<br>两者的区别在于，</p>
<p><code>ion-header-bar</code>可以做进一步的样式设置扩展，比如说在两侧加上按钮等。</p>
<p><img src="/image/nav-extention.png" alt="导航栏扩展"></p>
<p><code>ion-nav-bar</code> 集成了<code>Ionic router</code>和历史路径的压栈。使用后可以回退到上一个浏览的页面。</p>
<p><img src="/image/nav-back.png" alt="导航栏回退"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>参考：<a href="http://learn.ionicframework.com/formulas/navigation-bar-vs-header-bar/" target="_blank" rel="external">ionic 官方教程</a>;</p>
<p]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[ionic presentation]]></title>
    <link href="http://wangximing.github.io/2015/10/27/ionic-presentation/"/>
    <id>http://wangximing.github.io/2015/10/27/ionic-presentation/</id>
    <published>2015-10-27T03:07:00.000Z</published>
    <updated>2015-10-27T03:32:21.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Ionic">Ionic</h2><h3 id="Ionic简介">Ionic简介</h3><p>Ionic是一个开源的前端开发框架，可以用HTML,CSS,JS来开发Hybird App.</p>
<h3 id="Ionic_Stack">Ionic Stack</h3><ul>
<li>AngularJS</li>
<li>NodeJS</li>
<li>Sass</li>
<li>Bower</li>
<li>Cordova</li>
<li>Gulp</li>
<li>Travis CI</li>
<li>UI-Router</li>
</ul>
<h3 id="Start_building_with_Ionic">Start building with Ionic</h3><ul>
<li><p>Install</p>
<p>  <code>npm install -g cordova ionic</code></p>
</li>
<li><p>Create</p>
<p>  <code>ionic start myApp tabs</code><br><img src="/image/ionic-structure.png" alt="Ionic 项目结构"></p>
</li>
<li><p>Run</p>
<p>  <code>ionic serve</code></p>
</li>
</ul>
<h3 id="Ionic_JS&amp;CSS">Ionic JS&amp;CSS</h3><ul>
<li>Headers/Footers</li>
<li>Keyboard</li>
<li>Navigation</li>
<li>Keyboard</li>
<li>Side Menus</li>
<li>List</li>
</ul>
<h3 id="Code_Ionic">Code Ionic</h3><p>Ionic的代码基本都在<code>www</code>文件夹内完成</p>
<h4 id="UI-Router">UI-Router</h4><p> UI-Router是AngularJS的一个路由框架，是ng-router的替代品。相比于ng-router可以更简单的做到<strong>深层次嵌套路由</strong>。用法和ng-router相似。</p>
 <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">angular.module(<span class="string">'cmb'</span>, [<span class="string">'ionic'</span>])</span><br><span class="line">     .config(<span class="function"><span class="keyword">function</span> (<span class="params">$stateProvider, $urlRouterProvider</span>) </span>&#123;</span><br><span class="line">       $stateProvider</span><br><span class="line"></span><br><span class="line">         .state(<span class="string">'tab'</span>, &#123;</span><br><span class="line">           url: <span class="string">'/tab'</span>,</span><br><span class="line">           abstract: <span class="literal">true</span>,</span><br><span class="line">           templateUrl: <span class="string">'templates/tabs.html'</span></span><br><span class="line">         &#125;)</span><br><span class="line"></span><br><span class="line">         .state(<span class="string">'tab.life'</span>, &#123;</span><br><span class="line">           url:<span class="string">'/life'</span>,</span><br><span class="line">           views: &#123;</span><br><span class="line">             <span class="string">'tab-life'</span>: &#123;</span><br><span class="line">               templateUrl: <span class="string">'templates/tab-life.html'</span></span><br><span class="line">             &#125;</span><br><span class="line">           &#125;</span><br><span class="line">         &#125;);</span><br><span class="line"></span><br><span class="line">   $urlRouterProvider.otherwise(<span class="string">'/tab/life'</span>);</span><br><span class="line"> &#125;)</span><br></pre></td></tr></table></figure>
<h3 id="页面">页面</h3><ul>
<li>在index.html中添加</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">body</span> <span class="attribute">ng-app</span>=<span class="value">"cmb"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ion-nav-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;/<span class="title">ion-nav-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;/<span class="title">body</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>Then on app start, <code>$stateProvider</code> will look at the url, see it matches the index state,<br>and then try to load <code>home.html</code> into the <ion-nav-view>.</ion-nav-view></p>
<ul>
<li>添加 <code>templates/tabs.html</code>文件</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ion-tabs</span> <span class="attribute">class</span>=<span class="value">"tabs-icon-top"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">ion-tab</span> <span class="attribute">title</span>=<span class="value">"最爱"</span> <span class="attribute">icon</span>=<span class="value">"icon ion-star"</span> <span class="attribute">href</span>=<span class="value">"#/tab/dash"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ion-nav-view</span> <span class="attribute">name</span>=<span class="value">"tab-dash"</span>&gt;</span><span class="tag">&lt;/<span class="title">ion-nav-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">ion-tab</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">ion-tab</span> <span class="attribute">title</span>=<span class="value">"生活"</span> <span class="attribute">icon</span>=<span class="value">"icon ion-ios-cart"</span> <span class="attribute">href</span>=<span class="value">"#/tab/life"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ion-nav-view</span> <span class="attribute">name</span>=<span class="value">"tab-life"</span>&gt;</span><span class="tag">&lt;/<span class="title">ion-nav-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">ion-tab</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">ion-tab</span> <span class="attribute">title</span>=<span class="value">"助手"</span> <span class="attribute">icon</span>=<span class="value">"icon ion-bag"</span> <span class="attribute">href</span>=<span class="value">"#/tab/account"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ion-nav-view</span> <span class="attribute">name</span>=<span class="value">"tab-account"</span>&gt;</span><span class="tag">&lt;/<span class="title">ion-nav-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">ion-tab</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="title">ion-tab</span> <span class="attribute">title</span>=<span class="value">"银行"</span> <span class="attribute">icon</span>=<span class="value">"icon ion-cash"</span> <span class="attribute">href</span>=<span class="value">"#/tab/bank"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">ion-nav-view</span> <span class="attribute">name</span>=<span class="value">"tab-bank"</span>&gt;</span><span class="tag">&lt;/<span class="title">ion-nav-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">ion-tab</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="title">ion-tabs</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li>添加<code>templates/tab-life.html</code>页面</li>
</ul>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ion-header-bar</span> <span class="attribute">class</span>=<span class="value">"bar-dark"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">h1</span> <span class="attribute">class</span>=<span class="value">"title"</span>&gt;</span>招商银行<span class="tag">&lt;/<span class="title">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">button</span> <span class="attribute">class</span>=<span class="value">"button button-icon"</span> <span class="attribute">ng-click</span>=<span class="value">"newTask()"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"icon ion-person"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ion-header-bar</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">ion-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="title">ion-content</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"item item-divider"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">div</span> <span class="attribute">class</span>=<span class="value">"list"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"item item-icon-left"</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"icon ion-email"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span></span><br><span class="line">        Check mail</span><br><span class="line">      <span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line">      <span class="tag">&lt;<span class="title">a</span> <span class="attribute">class</span>=<span class="value">"item item-icon-left item-icon-right"</span> <span class="attribute">href</span>=<span class="value">"#"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"icon ion-chatbubble-working"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span></span><br><span class="line">        Call Ma</span><br><span class="line">        <span class="tag">&lt;<span class="title">i</span> <span class="attribute">class</span>=<span class="value">"icon ion-ios-telephone-outline"</span>&gt;</span><span class="tag">&lt;/<span class="title">i</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="title">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="title">ion-content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">ion-view</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样就可以看到刚刚写界面了</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Ionic">Ionic</h2><h3 id="Ionic简介">Ionic简介</h3><p>Ionic是一个开源的前端开发框架，可以用HTML,CSS,JS来开发Hybird App.</p>
<h3 id="Ionic_Stack">Ionic Stack]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[MVC and MV*]]></title>
    <link href="http://wangximing.github.io/2015/10/19/MVC-and-MV/"/>
    <id>http://wangximing.github.io/2015/10/19/MVC-and-MV/</id>
    <published>2015-10-19T10:55:56.000Z</published>
    <updated>2015-10-19T10:56:09.000Z</updated>
    <content type="html"><![CDATA[<h2 id="MV*_都有什么是怎么区分的">MV* 都有什么是怎么区分的</h2><p>关于MV*这里还是有很多有趣的故事的.</p>
<ul>
<li>已经没有疑惑的有MVC是设计模式还是架构，</li>
<li>还有至今疑惑的有当时听得一个关于MVC的解释(单纯讲MVC,没有说是在那个框架中得实现)，当时听得很疑惑，然后下来就查找了相关内容.</li>
<li>疑惑的有MVC本身的定(Model1, Model2)）</li>
<li>还有一个就是前端MVC和后端MVC的区别，</li>
<li>再一个就是不同语言框架实现的区别。</li>
<li>还有就是不同领域的问题，BS、CS、移动端。感觉理清楚还是很困难的</li>
</ul>
<blockquote>
<ul>
<li>这里还是很冉的看了<a href="http://www.ruanyifeng.com/blog/2015/02/mvcmvp_mvvm.html" target="_blank" rel="external">阮一峰的日志</a>和下面的评论，发现越看越冉了。</li>
<li>主要的点主要是MVC，MVP，MVVP的图，而且不解释的也很是让人疑惑<br>其余的点还有 <a href="http://blog.nodejitsu.com/scaling-isomorphic-javascript-code/" target="_blank" rel="external">阮一峰博客中得引用</a> 还有这篇文章的引用</li>
<li>和 Martin Fowler 的两篇介绍。<a href="http://martinfowler.com/eaaDev/ModelViewPresenter.html" target="_blank" rel="external">1</a>, <a href="http://martinfowler.com/eaaDev/uiArchs.html" target="_blank" rel="external">2</a>;</li>
</ul>
</blockquote>
<p>认真研读完上面的资料再做一个总结吧，真的是很冉。</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="MV*_都有什么是怎么区分的">MV* 都有什么是怎么区分的</h2><p>关于MV*这里还是有很多有趣的故事的.</p>
<ul>
<li>已经没有疑惑的有MVC是设计模式还是架构，</li>
<li>还有至今疑惑的有当时听得一个关于MVC的解释(单纯讲MVC,]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Single Page Application ]]></title>
    <link href="http://wangximing.github.io/2015/10/19/Single-Page-Application/"/>
    <id>http://wangximing.github.io/2015/10/19/Single-Page-Application/</id>
    <published>2015-10-19T10:55:00.000Z</published>
    <updated>2015-10-19T10:55:34.000Z</updated>
    <content type="html"><![CDATA[<h4 id="参考">参考</h4><blockquote>
<ul>
<li><a href="https://github.com/lifesinger/lifesinger.github.io/issues/184" target="_blank" rel="external">参考一</a></li>
<li><a href="https://github.com/xufei/blog/blob/master/posts/2014-10-21-build-single-page-application.md" target="_blank" rel="external">参考二</a></li>
</ul>
</blockquote>
<ul>
<li><p>前后端分离，什么是前后端分离。</p>
<blockquote>
<ul>
<li>大家一致认同的前后端分离的例子就是SPA(Single-page application)，所有用到的展现数据都是后端通过异步接口(AJAX/JSONP)的方式提供的，前端只管展现。<br>从某种意义上来说，SPA确实做到了前后端分离.</li>
<li>SPA式的前后端分离，是从物理层做区分（认为只要是客户端的就是前端，服务器端的就是后端），这种分法已经无法满足我们前后端分离的需求，我们认为从职责上划分才能满足目前我们的使用场景：<br>前端：负责View和Controller层。<br>后端：只负责Model层，业务处理/数据等。</li>
</ul>
</blockquote>
</li>
</ul>
<h3 id="单页应用">单页应用</h3><ul>
<li><p>SPA（单页面程序，Single Page Application）到底是什么</p>
<blockquote>
<p>所谓单页应用，指的是在一个页面上集成多种功能，甚至整个系统就只有一个页面，所有的业务功能都是它的子模块，通过特定的方式挂接到主界面上。它是AJAX技术的进一步升华，把AJAX的无刷新机制发挥到极致，因此能造就与桌面程序媲美的流畅用户体验。</p>
</blockquote>
</li>
<li><p>单页应用的路由管理</p>
<blockquote>
<ul>
<li>把产品功能划分为若干状态，每个状态映射到相应的路由，然后通过pushState这样的机制，动态解析路由，使之与功能界面匹配</li>
<li>看了上面的解释还是不会</li>
</ul>
</blockquote>
</li>
<li><p>页面的渲染到底应该怎么做？1：浏览器会对请求回来的HTML解析渲染，2：但是发Ajax得到的HTML并不会被自动渲染，需要手动的渲染。1和2应该怎么取舍，怎么结合。</p>
<blockquote>
<p>当切换功能的时候，除了产生数据请求，还需要渲染界面，这个新渲染的界面部件一般是界面模板，它从哪里来呢？来源无非是两种，一种是即时请求，像请求数据那样通过AJAX获取过来，另一种是内置于主界面的某些位置，比如script标签或者不可见的textarea中</p>
</blockquote>
</li>
<li><p>服务端通信</p>
<blockquote>
<p>传统的Web产品通常使用JSONP或者AJAX这样的方式与服务端通信，但在单页Web应用中，有很大一部分采用WebSocket这样的实时通讯方式。<br>WebSocket与传统基于HTTP的通信机制相比，有很大的优势。它可以让服务端很便利地使用反向推送，前端只响应确实产生业务数据的事件，减少一遍又一遍无意义的AJAX轮询。</p>
</blockquote>
</li>
<li><p>内存管理</p>
<blockquote>
<p>传统的Web页面一般是不需要考虑内存的管理的，因为用户的停留时间相对少，即使出现内存泄漏，可能很快就被刷新页面之类的操作冲掉了，但单页应用是不同的，它的用户很可能会把它开一整天，因此，我们需要对其中的DOM操作、网络连接等部分格外小心。</p>
</blockquote>
</li>
<li><p><del>Node带来的全栈时代？？？</del></p>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h4 id="参考">参考</h4><blockquote>
<ul>
<li><a href="https://github.com/lifesinger/lifesinger.github.io/issues/184" target="_blank" rel="extern]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Java File]]></title>
    <link href="http://wangximing.github.io/2015/10/17/Java-File/"/>
    <id>http://wangximing.github.io/2015/10/17/Java-File/</id>
    <published>2015-10-17T07:55:50.000Z</published>
    <updated>2015-10-18T02:07:51.000Z</updated>
    <content type="html"><![CDATA[<p>文件操作是永远的痛啊，特别是Java的文件操作。</p>
<ul>
<li>Java 文件都是用byte[]存储的</li>
<li>还有其他的好多知识需要记在这里</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>文件操作是永远的痛啊，特别是Java的文件操作。</p>
<ul>
<li>Java 文件都是用byte[]存储的</li>
<li>还有其他的好多知识需要记在这里</li>
</ul>
]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Bootstrap switch]]></title>
    <link href="http://wangximing.github.io/2015/10/17/Bootstrap-switch/"/>
    <id>http://wangximing.github.io/2015/10/17/Bootstrap-switch/</id>
    <published>2015-10-17T07:10:07.000Z</published>
    <updated>2015-10-18T02:06:44.000Z</updated>
    <content type="html"><![CDATA[<p>先写一下使用BootStrap Switch使用中得一个问题，在写BootStrap的使用。</p>
<h3 id="问题">问题</h3><p>在BootStrap Switch 的switchChange方法中调用Ajax请求，请求的的error回调中调用<br>statechange把状态改回之前的样子。回造成一个循环调用的错误，也就是如果Ajax调用错误，这个Ajax会一直请求下去。好可怕，赶紧关了浏览器窗口<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#app-table-id'</span>).on(<span class="string">'switchChange.bootstrapSwitch'</span>, <span class="string">'[name="my-checkbox"]'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event, state</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">            $.ajax(<span class="string">"/app/statechange"</span>)</span><br><span class="line">                .done(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">                &#125;)</span><br><span class="line">                .error(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">                    $(self).bootstrapSwitch(<span class="string">'state'</span>, !state);<span class="comment">//把状态改回去</span></span><br><span class="line">                &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure></p>
<h3 id="解决方式">解决方式</h3><ul>
<li>在触发<code>switchChange</code>事件的时候判断一下是点击触发的还是Ajax失败回调触发的<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> userClick = <span class="literal">true</span>;</span><br><span class="line">$(<span class="string">'#app-table-id'</span>).on(<span class="string">'switchChange.bootstrapSwitch'</span>, <span class="string">'[name="my-checkbox"]'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event, state</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> id = $(<span class="keyword">this</span>).data(<span class="string">'id'</span>);</span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">if</span> (userClick) &#123;</span><br><span class="line">        $.ajax(&#123;</span><br><span class="line">                url: <span class="string">'/apps/'</span> + id + <span class="string">'/available'</span>,</span><br><span class="line">                type: <span class="string">'put'</span>,</span><br><span class="line">                data: <span class="built_in">JSON</span>.stringify(&#123;isAvailable: state&#125;),</span><br><span class="line">                contentType: <span class="string">"application/json"</span></span><br><span class="line">            &#125;</span><br><span class="line">        )</span><br><span class="line">            .done(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">                toastr.info(<span class="string">'状态更改成功'</span>);</span><br><span class="line">            &#125;)</span><br><span class="line">            .error(<span class="function"><span class="keyword">function</span> (<span class="params">result</span>) </span>&#123;</span><br><span class="line">                toastr.info(<span class="string">'状态更改失败'</span>);</span><br><span class="line">                userClick = <span class="literal">false</span>;</span><br><span class="line">                $(self).bootstrapSwitch(<span class="string">'state'</span>, !state);</span><br><span class="line">            &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    userClick = <span class="literal">true</span>;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="使用">使用</h3><ul>
<li>下载BootStrap Switch 到项目中</li>
<li><p>在HTML中使用,HTML和js中得代码</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span>  <span class="attribute">type</span>=<span class="value">"checkbox"</span> <span class="attribute">name</span>=<span class="value">"my-checkbox"</span>/&gt;</span></span><br></pre></td></tr></table></figure>
<p>启动插件</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">"[name='my-checkbox']"</span>).bootstrapSwitch(<span class="string">'size'</span>, <span class="string">'small'</span>);</span><br></pre></td></tr></table></figure>
</li>
<li><p>点击switch后的处理<br>BootStrap Switch 屏蔽了click事件，要处理click后的处理要使用BootStrap Switch 的switchChange事件</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#app-table-id'</span>).on(<span class="string">'switchChange.bootstrapSwitch'</span>, <span class="string">'[name="my-checkbox"]'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">event, state</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>先写一下使用BootStrap Switch使用中得一个问题，在写BootStrap的使用。</p>
<h3 id="问题">问题</h3><p>在BootStrap Switch 的switchChange方法中调用Ajax请求，请求的的error回调中调用<br>sta]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[JavaScript Pagination]]></title>
    <link href="http://wangximing.github.io/2015/10/17/JavaScript-Pagination/"/>
    <id>http://wangximing.github.io/2015/10/17/JavaScript-Pagination/</id>
    <published>2015-10-17T06:34:10.000Z</published>
    <updated>2015-10-17T07:59:44.000Z</updated>
    <content type="html"><![CDATA[<h3 id="闲谈">闲谈</h3><p>写这段文字的时候，想起了之前的一个小故事。以前在做一个项目的时候，要做一个翻页功能，就<strong>翻页</strong>关键字再一直搜索，可想而知搜出来的都是一些CSDN上的博客，帮助不大，没有直观认识。<br>自从学会了<strong>Pagination</strong>关键字，一搜索就出来了可以用的插件。对，你没有看错，这段字就是想说我不知道翻页的英语是pagination,也想说下英语多么的重要<br>。翻页===pagination</p>
<h3 id="正文">正文</h3><p>这里主要介绍一下一个jQuery pagination plugin，<a href="http://esimakin.github.io/twbs-pagination/" target="_blank" rel="external">twbspagination</a><br>一个非常好用的翻页工具。</p>
<ul>
<li>下载twbspagination文件，引入到要用的HTML文件中。</li>
<li><p>在HTML和js中分别添加下面的代码，就可以显示出分页效果。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">ul</span> <span class="attribute">id</span>=<span class="value">"pagination-demo"</span> <span class="attribute">class</span>=<span class="value">"pagination-sm"</span>&gt;</span><span class="tag">&lt;/<span class="title">ul</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>启动并初始化插件</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#pagination-demo'</span>).twbsPagination(&#123;</span><br><span class="line">        totalPages: <span class="number">35</span>,</span><br><span class="line">        visiblePages: <span class="number">7</span>,</span><br><span class="line">        onPageClick: <span class="function"><span class="keyword">function</span> (<span class="params">event, page</span>) </span>&#123;</span><br><span class="line">            $(<span class="string">'#page-content'</span>).text(<span class="string">'Page '</span> + page);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>一个使用pagination插件的实例代码(差一点掉入回调地狱的代码)；</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">$.ajax(<span class="string">'/apps/totalNumber'</span>)</span><br><span class="line">      .done(<span class="function"><span class="keyword">function</span> (<span class="params">total</span>) </span>&#123;</span><br><span class="line">          <span class="keyword">var</span> totalPages = total % <span class="number">20</span> === <span class="number">0</span> ? total / <span class="number">20</span> : total / <span class="number">20</span> + <span class="number">1</span>;</span><br><span class="line">          $(<span class="string">'#pagination-app'</span>).twbsPagination(&#123;</span><br><span class="line">              totalPages: totalPages,</span><br><span class="line">              visiblePages: <span class="number">5</span> &gt; totalPages ? <span class="number">5</span> : totalPages,</span><br><span class="line">              first: <span class="string">'首页'</span>,</span><br><span class="line">              prev: <span class="string">'前一页'</span>,</span><br><span class="line">              next: <span class="string">'下一页'</span>,</span><br><span class="line">              last: <span class="string">'末页'</span>,</span><br><span class="line">              onPageClick: <span class="function"><span class="keyword">function</span> (<span class="params">event, page</span>) </span>&#123;</span><br><span class="line">                  $.ajax(<span class="string">'/apps'</span>, &#123;data: &#123;pageSize: <span class="number">20</span>, pageNumber: page&#125;&#125;)</span><br><span class="line">                      .done(<span class="function"><span class="keyword">function</span> (<span class="params">apps</span>) </span>&#123;</span><br><span class="line">                          <span class="keyword">var</span> html;</span><br><span class="line">                          apps.content.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">app</span>) </span>&#123;</span><br><span class="line">                              html += getAppTr(app);</span><br><span class="line">                          &#125;);</span><br><span class="line"></span><br><span class="line">                          <span class="keyword">var</span> result = <span class="string">'&lt;tbody&gt;'</span> + html + <span class="string">'&lt;/tbody&gt;'</span>;</span><br><span class="line">                          $(<span class="string">'tbody'</span>).replaceWith(result);</span><br><span class="line"></span><br><span class="line">                          setUpBootstrapSwitch();</span><br><span class="line">                          imageOnError();</span><br><span class="line">                      &#125;)</span><br><span class="line">                      .error(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">                      &#125;);</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;);</span><br><span class="line">      &#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="闲谈">闲谈</h3><p>写这段文字的时候，想起了之前的一个小故事。以前在做一个项目的时候，要做一个翻页功能，就<strong>翻页</strong>关键字再一直搜索，可想而知搜出来的都是一些CSDN上的博客，帮助不大，没有直观认识。<br>自从学会了<stro]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[image upload and download with jQuery and SpringMVC MySQL Blob]]></title>
    <link href="http://wangximing.github.io/2015/10/17/image-upload-and-download-with-jQuery-and-SpringMVC-Myslq-Blob/"/>
    <id>http://wangximing.github.io/2015/10/17/image-upload-and-download-with-jQuery-and-SpringMVC-Myslq-Blob/</id>
    <published>2015-10-17T03:21:19.000Z</published>
    <updated>2015-10-17T08:01:15.000Z</updated>
    <content type="html"><![CDATA[<h3 id="需求">需求</h3><ul>
<li>图片以blob 格式存储在MySQL 数据库中</li>
<li>浏览器中使用jQuery读取图片，显示到网页上。</li>
<li>将读取到的图片连同其他信息，如图片描述等信息一同上传到服务器</li>
<li>从数据库读取图片，显示到浏览器。</li>
<li><strong>新建一个app并将其显示出来，app包含字段name,icon(图片),description</strong></li>
</ul>
<h3 id="实现">实现</h3><h4 id="读取图片显示到浏览器中。">读取图片显示到浏览器中。</h4><ul>
<li>使用 <code>&lt;input type=&#39;file&#39; id=&#39;icon&#39;&gt;</code> 来上传图片。</li>
<li><p>使用下面的JS代码进行获取。</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#fileIcon'</span>).on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> files = evt.target.files;</span><br><span class="line"><span class="keyword">var</span> file = files[<span class="number">0</span>]；</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
<li><p>改变默认的上传外观<br>HTML中设置上传框隐藏</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">input</span> <span class="attribute">name</span>=<span class="value">""</span> <span class="attribute">type</span>=<span class="value">"file"</span> <span class="attribute">id</span>=<span class="value">"fileIcon"</span> <span class="attribute">style</span>=<span class="value">"display:none"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">button</span> <span class="attribute">id</span>=<span class="value">"fileIconButton"</span> <span class="attribute">type</span>=<span class="value">"button"</span> <span class="attribute">class</span>=<span class="value">"btn btn-default btn-sm"</span>&gt;</span>上传图标</span><br><span class="line"><span class="tag">&lt;/<span class="title">button</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>JS中调用上传框</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fileIcon = <span class="built_in">document</span>.getElementById(<span class="string">'fileIcon'</span>),</span><br><span class="line">        fileIconButton = <span class="built_in">document</span>.getElementById(<span class="string">'fileIconButton'</span>);</span><br><span class="line">    <span class="keyword">if</span> (fileIconButton) &#123;</span><br><span class="line">        fileIconButton.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (fileIcon) &#123;</span><br><span class="line">                fileIcon.click();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>
<p>设置input的<code>change</code>事件</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#fileIcon'</span>).on(<span class="string">'change'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">evt</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> files = evt.target.files;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, f; f = files[i]; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!f.type.match(<span class="string">'image.*'</span>)) &#123;</span><br><span class="line">            toastr.error(<span class="string">'文件格式不符合要求'</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//显示到页面</span></span><br><span class="line">        <span class="keyword">if</span> (f.size &lt; <span class="number">100</span> * <span class="number">1024</span>) &#123;</span><br><span class="line">            <span class="keyword">var</span> reader = <span class="keyword">new</span> FileReader();</span><br><span class="line"></span><br><span class="line">            reader.onload = (<span class="function"><span class="keyword">function</span> (<span class="params">theFile</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</span><br><span class="line">                    $(<span class="string">'#app-image-id'</span>).attr(<span class="string">'src'</span>, e.target.result);</span><br><span class="line">                    $(<span class="string">'#app-icon-name'</span>).val(theFile.name);</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;)(f);</span><br><span class="line"></span><br><span class="line">            reader.readAsDataURL(f);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            toastr.error(<span class="string">'文件过大,请选择小于100k的图片!'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h4 id="上传图片和其他信息到服务器">上传图片和其他信息到服务器</h4><p> 再次明确下需求，这里不是简单的上传一张图片到服务器，而是图片和其他信息一起。比如说：上传一个app的icon和app的名称，描述以及其他信息，一块到服务器<br> 这里在搜索解决办法的时候 是 <code>form image</code>。<br> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> formData = <span class="keyword">new</span> FormData();             </span><br><span class="line">formData.append(<span class="string">'icon'</span>, icon); <span class="comment">//图片            </span></span><br><span class="line">formData.append(<span class="string">'name'</span>, name);<span class="comment">//其他信息             </span></span><br><span class="line">formData.append(<span class="string">'describes'</span>, describes);             </span><br><span class="line">formData.append(<span class="string">'isAvailable'</span>, isAvailable);</span><br><span class="line"><span class="keyword">var</span> xhr = <span class="keyword">new</span> XMLHttpRequest();</span><br><span class="line">xhr.open(<span class="string">'POST'</span>, <span class="string">'/apps'</span>, <span class="literal">true</span>);</span><br><span class="line"> xhr.onload = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">     <span class="keyword">if</span> (xhr.status === <span class="number">200</span>) &#123;</span><br><span class="line">         <span class="keyword">var</span> appId = xhr.response;</span><br><span class="line">         insertAppToAppTable(&#123;id: appId, name: name, describes: describes, isAvailable: isAvailable&#125;);</span><br><span class="line">         $(<span class="string">'.first'</span>).trigger(<span class="string">'click'</span>);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;;</span><br><span class="line"> xhr.send(formData);</span><br></pre></td></tr></table></figure></p>
 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@RequestMapping</span>(value = <span class="string">"/apps"</span>, method = RequestMethod.POST)</span><br><span class="line"> <span class="annotation">@ResponseBody</span></span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">long</span> <span class="title">createApp</span><span class="params">(@RequestBody MultipartFile icon, String name, String describes, <span class="keyword">boolean</span> isAvailable)</span> </span>&#123;</span><br><span class="line">     <span class="keyword">byte</span>[] iconFile = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">0</span>];</span><br><span class="line">     <span class="keyword">if</span> (icon != <span class="keyword">null</span>) &#123;</span><br><span class="line">         <span class="keyword">try</span> &#123;</span><br><span class="line">             iconFile = icon.getBytes();</span><br><span class="line">         &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">             e.printStackTrace();</span><br><span class="line">         &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">     App app = <span class="keyword">new</span> App();</span><br><span class="line">     app.setIcon(iconFile);</span><br><span class="line">     app.setName(name);</span><br><span class="line">     app.setDescribes(describes);</span><br><span class="line">     app.setIsAvailable(isAvailable);</span><br><span class="line">     App result = appService.createApp(app);</span><br><span class="line"></span><br><span class="line">     <span class="keyword">return</span> result.getId();</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<h4 id="从数据库取出Blob图片，显示到页面">从数据库取出Blob图片，显示到页面</h4><p>在这里的时候，开始想的是从后台获取完整的app对象，然后得到app.icon字段。使用JS转码显示到页面。<br>但是在实现的时候遇到了很多的问题，查了很多资料，尝试了很多次，还是不能正确的显示出来。<br>最后改变了实现方式，<strong>图片显示的时候单独向后台发请求</strong> 就很迅速的完成了，总结一下是思路很重要。<br>前台代码<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">img</span> <span class="attribute">class</span>=<span class="value">"app-icon"</span> <span class="attribute">src</span>=<span class="value">"'/apps/' + $&#123;app.id&#125; + '/icon'"</span>/&gt;</span><span class="tag">&lt;/<span class="title">td</span>&gt;</span></span><br></pre></td></tr></table></figure></p>
<p>SpringBoot Controller 代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@RequestMapping</span>(<span class="string">"apps/&#123;appId&#125;/icon"</span>)</span><br><span class="line">  <span class="keyword">public</span> ResponseEntity&lt;?&gt; getAppIcon(<span class="annotation">@PathVariable</span> <span class="keyword">long</span> appId) &#123;</span><br><span class="line">      HttpHeaders headers = <span class="keyword">new</span> HttpHeaders();</span><br><span class="line">      headers.setContentType(MediaType.IMAGE_JPEG);</span><br><span class="line">      HttpStatus httpStatus = HttpStatus.OK;</span><br><span class="line">      <span class="keyword">byte</span>[] icon = appService.getAppById(appId).getIcon();</span><br><span class="line">      <span class="keyword">if</span> (icon == <span class="keyword">null</span>) &#123;</span><br><span class="line">          httpStatus = HttpStatus.NOT_FOUND;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(</span><br><span class="line">              appService.getAppById(appId).getIcon(), headers,</span><br><span class="line">              httpStatus);</span><br><span class="line"></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p>
]]></content>
    <summary type="html">
    <![CDATA[<h3 id="需求">需求</h3><ul>
<li>图片以blob 格式存储在MySQL 数据库中</li>
<li>浏览器中使用jQuery读取图片，显示到网页上。</li>
<li>将读取到的图片连同其他信息，如图片描述等信息一同上传到服务器</li>
<li>从数据库读]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Thymeleaf]]></title>
    <link href="http://wangximing.github.io/2015/10/17/Thymeleaf/"/>
    <id>http://wangximing.github.io/2015/10/17/Thymeleaf/</id>
    <published>2015-10-17T03:13:48.000Z</published>
    <updated>2015-10-17T03:19:44.000Z</updated>
    <content type="html"><![CDATA[<p>Thymeleaf是Java的一个模板引擎，和JSP类似。但是相比于JSP，Thymeleaf的语法更加语义化，而且写的是HTML代码（不是JSP）代码。<br>SpringBoot中默认支持ThymeLeaf 。</p>
<h3 id="一些小语法">一些小语法</h3><p>th:src<br>th:attr=”data-id=9393”</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>Thymeleaf是Java的一个模板引擎，和JSP类似。但是相比于JSP，Thymeleaf的语法更加语义化，而且写的是HTML代码（不是JSP）代码。<br>SpringBoot中默认支持ThymeLeaf 。</p>
<h3 id="一些小语法">一些小语法</h3>]]>
    </summary>
    
  </entry>
  
  <entry>
    <title><![CDATA[Spring Boot]]></title>
    <link href="http://wangximing.github.io/2015/10/11/Spring-Boot/"/>
    <id>http://wangximing.github.io/2015/10/11/Spring-Boot/</id>
    <published>2015-10-11T07:32:23.000Z</published>
    <updated>2015-10-17T03:16:59.000Z</updated>
    <content type="html"><![CDATA[<p>进公司的第一个项目在使用Spring Boot，所以这里就总结一下Spring Boot 使用时的一些小技能。</p>
<h3 id="SpringBoot简介">SpringBoot简介</h3><p> 我理解的SpringBoot是Spring的另一个产品，建立Spring MVC 之上的一个框架，与Spring MVC相比<br> 它在开始使用的时候就使用了Java 配置的方式（之前学的Spring MVC 还是使用xml进行的配置)。而且Spring<br> Boot 集成了基本上所有的Web开发需要的基础jar包，比如说hibernate等。Spring Boot还为项目提供了很多的<br> 默认配置方式，比如说项目的静态资源的路径，视图解析器，还有ORM等。值得一提的是Spring Boot 使用的Spring Data JPA<br> 的ORM，这个ORM在项目使用中比Hibernate还要简单（至少在我们这个简单项目中是这个样子）。下面会有更详细的实例。</p>
<h3 id="新建一个SpringBoot项目">新建一个SpringBoot项目</h3><p>详细的项目建立步骤可以参考Spring官网的 <a href="http://spring.io/guides/gs/spring-boot/" target="_blank" rel="external">Building an Application with Spring Boot</a></p>
<h4 id="新建一个Gradle项目">新建一个Gradle项目</h4><ul>
<li>建立Gradle 项目文件结构</li>
<li>给build.gradle 中添加设置以及依赖<figure class="highlight puppet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">group <span class="string">'com.h5'</span></span><br><span class="line">version <span class="string">'1.0-SNAPSHOT'</span></span><br><span class="line"></span><br><span class="line"><span class="name">buildscript</span> &#123;</span><br><span class="line">    ext &#123;</span><br><span class="line">        springbootVersion = <span class="string">'1.2.6.RELEASE'</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="name">repositories</span> &#123;</span><br><span class="line">        mavenCentral()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="name">dependencies</span> &#123;</span><br><span class="line">        classpath(<span class="string">"org.springframework.boot:spring-boot-gradle-plugin:<span class="variable">$springbootVersion</span>"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="name">ext</span> &#123;</span><br><span class="line">    springbootVersion = <span class="string">'1.2.6.RELEASE'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="name">apply</span> <span class="name">plugin</span>: <span class="string">'java'</span></span><br><span class="line">apply plugin: <span class="string">'idea'</span></span><br><span class="line">apply plugin: <span class="string">'spring-boot'</span></span><br><span class="line"></span><br><span class="line"><span class="name">repositories</span> &#123;</span><br><span class="line">    mavenCentral()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="name">sourceCompatibility</span> = 1.8</span><br><span class="line">targetCompatibility = 1.8</span><br><span class="line"></span><br><span class="line"><span class="name">dependencies</span> &#123;</span><br><span class="line">    compile <span class="string">"org.springframework.boot:spring-boot-starter-web:<span class="variable">$springbootVersion</span>"</span></span><br><span class="line">    compile <span class="string">"org.springframework.boot:spring-boot-starter-data-jpa:<span class="variable">$springbootVersion</span>"</span></span><br><span class="line">    compile <span class="string">"org.springframework.boot:spring-boot-starter-thymeleaf:<span class="variable">$springbootVersion</span>"</span></span><br><span class="line">    compile <span class="string">"org.springframework.boot:spring-boot-starter-security:<span class="variable">$springbootVersion</span>"</span></span><br><span class="line">    compile <span class="string">'mysql:mysql-connector-java:5.1.36'</span></span><br><span class="line"></span><br><span class="line">    testCompile <span class="string">'junit:junit:4.12'</span></span><br><span class="line">    testCompile <span class="string">'commons-io:commons-io:2.4'</span></span><br><span class="line">    testCompile <span class="string">"org.springframework.boot:spring-boot-starter-test:<span class="variable">$springbootVersion</span>"</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="name">task</span> <span class="name">wrapper</span>(type: Wrapper) &#123;</span><br><span class="line">    gradleVersion = <span class="string">'2.5'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<ul>
<li>下载依赖</li>
<li><p>新建Application类，并添加SpringBoot配置，注意Application类要在所有其它Java类的上一层</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(Application.class, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>编写第一个Controller类</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="annotation">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="annotation">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Greetings from Spring Boot!"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>启动项目<code>Spring bootRun</code>,在浏览器输入<code>http://localhost:8080</code>测试项目是否新建成功。</p>
<h4 id="为项目添加Thymeleaf模板引擎">为项目添加<code>Thymeleaf</code>模板引擎</h4></li>
<li>在gradle中添加 <code>Thymeleaf</code>依赖<code>compile &quot;org.springframework.boot:spring-boot-starter-security:$springbootVersion&quot;</code>;</li>
<li>SpringBoot 会自动配置使用 <code>Thymeleaf</code>模板引擎，并配置模板路径到<code>main/resources/templates</code>，后缀为 <code>.html</code></li>
<li>在Controller中使用<code>@Controller</code>(不是<code>@RestController</code>),返回值为String，然后 return “template name”;</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<p>进公司的第一个项目在使用Spring Boot，所以这里就总结一下Spring Boot 使用时的一些小技能。</p>
<h3 id="SpringBoot简介">SpringBoot简介</h3><p> 我理解的SpringBoot是Spring的另一个产品，建立Spri]]>
    </summary>
    
      <category term="Spring Boot" scheme="http://wangximing.github.io/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[English learning plan]]></title>
    <link href="http://wangximing.github.io/2015/09/14/English-learning-plan/"/>
    <id>http://wangximing.github.io/2015/09/14/English-learning-plan/</id>
    <published>2015-09-13T23:29:01.000Z</published>
    <updated>2015-09-14T02:01:56.000Z</updated>
    <content type="html"><![CDATA[<ul>
<li>时间：2015.9-2016.2</li>
<li>目的：可以听懂基本的句子，可以与客户/同事交流，能快速读懂邮件</li>
<li>学习原则：词汇量差，发音差，所以提高词汇量练习并且练习发音。<h2 id="周一到周五：">周一到周五：</h2></li>
<li>每天早上背10个单词（半个小时）</li>
<li>每周学习一个TED视频，每晚练习一次（找生词，背诵，练习长句发音，练习某个单词的发音，反复练习)（一到两个小时）。<h2 id="周末：">周末：</h2></li>
<li>每天背10个单词（半小时）</li>
<li>一个电影（找生词，部分背诵，练习长句发音，练习某个单词发音）<blockquote>
<p>及时根据个人情况调整学习计划</p>
</blockquote>
</li>
</ul>
]]></content>
    <summary type="html">
    <![CDATA[<ul>
<li>时间：2015.9-2016.2</li>
<li>目的：可以听懂基本的句子，可以与客户/同事交流，能快速读懂邮件</li>
<li>学习原则：词汇量差，发音差，所以提高词汇量练习并且练习发音。<h2 id="周一到周五：">周一到周五：</h2></li>
<]]>
    </summary>
    
  </entry>
  
</feed>
